controller:
  image: "jenkins/jenkins"
  tag: "lts"
  imagePullPolicy: "Always"
  numExecutors: 0
  # configAutoReload requires UseSecurity is set to true:
  adminSecret: true
  
  adminUser: "admin"
  adminPassword: mirabelka
  # adminSshKey: <defaults to auto-generated>
  resources:
    requests:
      cpu: "50m"
      memory: "256Mi"
    limits:
      cpu: "2000m"
      memory: "2096Mi"
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"

  # Environment variables that get added to the init container (useful for e.g. http_proxy)
  # initContainerEnv:
  #   - name: http_proxy
  #     value: "http://192.168.64.1:3128"
  # containerEnv:
  #   - name: http_proxy
  #     value: "http://192.168.64.1:3128"
  # Set min/max heap here if needed with:
  # javaOpts: "-Xms512m -Xmx512m"
  # jenkinsOpts: ""
  # jenkinsUrl: ""
  # Use ClusterIP if your setup includes ingress controller
  serviceType: ClusterIP
  # Jenkins master service annotations
  serviceAnnotations: {}
  serviceLabels: {}
  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
  # Put labels on Jenkins master pod
  podLabels: {}
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/prometheus"
  cli: false
  # javaOpts: >
  #   -Dcom.sun.management.jmxremote.port=4000
  #   -Dcom.sun.management.jmxremote.authenticate=false
  #   -Dcom.sun.management.jmxremote.ssl=false
  # jmxPort: 4000

  # List of plugins to be install during Jenkins master start
  installPlugins:
    - ansicolor
    - basic-branch-build-strategies
    - blueocean
    - configuration-as-code
    - credentials-binding
    - git
    - gitea
    - gitlab-plugin
    - gitlab-oauth
    - gitlab-branch-source
    - hashicorp-vault-pipeline
    - hashicorp-vault-plugin
    - job-dsl
    - kubernetes
    - kubernetes-credentials-provider
    - oic-auth
    - prometheus
    - pipeline-multibranch-defaults
    - pipeline-utility-steps
    - rocketchatnotifier
    - role-strategy
    - simple-theme-plugin
    - ssh-slaves
    - terraform
    - theme-manager
    - solarized-theme
    - material-theme
    - dark-theme
    - workflow-aggregator
    - workflow-job

  # Enable to always override the installed plugins with the values of 'master.installPlugins' on upgrade or redeployment.
  # overwritePlugins: true
  scriptApproval:
    - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
    - "new groovy.json.JsonSlurperClassic"
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods leftShift java.util.Map java.util.Map"
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods split java.lang.String"
    - "method java.util.Collection toArray"
    - "staticMethod org.kohsuke.groovy.sandbox.impl.Checker checkedCall java.lang.Object boolean boolean java.lang.String java.lang.Object[]"
    - "staticMethod org.kohsuke.groovy.sandbox.impl.Checker checkedGetProperty java.lang.Object boolean boolean java.lang.Object"
  # List of groovy init scripts to be executed during Jenkins master start
  initScripts:
  #  - |
  #    print 'adding global pipeline libraries, register properties, bootstrap jobs...'
  # Kubernetes secret that contains a 'credentials.xml' for Jenkins
  # credentialsXmlSecret: jenkins-credentials
  # Kubernetes secret that contains files to be put in the Jenkins 'secrets' directory,
  # useful to manage encryption keys used for credentials.xml for instance (such as
  # master.key and hudson.util.Secret)
  # secretsFilesSecret: jenkins-secrets
  # Jenkins XML job configs to provision
  jobs: {}
  #  test: |-
  #    <<xml here>>

  JCasC:
    enabled: true
    configScripts:
      welcome-message: |
        jenkins:
          systemMessage: Welcome to our CI\CD server.  This Jenkins is configured and managed 'as code'.
      theme: |
        unclassified:
          themeManager:
            disableUserThemes: false
            theme: "material-indigo"
    securityRealm: |-
      local:
        allowsSignup: false
        enableCaptcha: false
        users:
        - id: "${chart-admin-username}"
          name: "Jenkins Admin"
          password: "${chart-admin-password}"
        - id: "u1"
          name: "Jenkins User1"
          password: "P@ssw0rd"
        - id: "u2"
          name: "Jenkins User2"
          password: "P@ssw0rd"
        - id: "u3"
          name: "Jenkins User3"
          password: "P@ssw0rd"
        - id: "u4"
          name: "Jenkins User4"
          password: "P@ssw0rd"
        - id: "u5"
          name: "Jenkins User5"
          password: "P@ssw0rd"
        - id: "u6"
          name: "Jenkins User6"
          password: "P@ssw0rd"
        - id: "u7"
          name: "Jenkins User7"
          password: "P@ssw0rd"
        - id: "u8"
          name: "Jenkins User8"
          password: "P@ssw0rd"
        - id: "u9"
          name: "Jenkins User9"
          password: "P@ssw0rd"
        - id: "u10"
          name: "Jenkins User10"
          password: "P@ssw0rd"
        - id: "u11"
          name: "Jenkins User11"
          password: "P@ssw0rd"
        - id: "u12"
          name: "Jenkins User12"
          password: "P@ssw0rd"
        - id: "u13"
          name: "Jenkins User13"
          password: "P@ssw0rd"
        - id: "u14"
          name: "Jenkins User14"
          password: "P@ssw0rd"
    authorizationStrategy: |-
     roleBased:
      roles:
        global:
        - assignments:
          - "admin"
          name: "admin"
          pattern: ".*"
          permissions:
          - "Job/Move"
          - "Job/Build"
          - "Lockable Resources/View"
          - "Credentials/Delete"
          - "Credentials/ManageDomains"
          - "Lockable Resources/Unlock"
          - "View/Create"
          - "Agent/Configure"
          - "Job/Read"
          - "Credentials/Update"
          - "Agent/Create"
          - "Job/ExtendedRead"
          - "Overall/SystemRead"
          - "Job/Delete"
          - "Agent/Build"
          - "View/Configure"
          - "Metrics/HealthCheck"
          - "Lockable Resources/Reserve"
          - "Agent/Provision"
          - "Metrics/ThreadDump"
          - "SCM/Tag"
          - "Job/Create"
          - "Job/Discover"
          - "Agent/ExtendedRead"
          - "Credentials/View"
          - "Agent/Connect"
          - "Agent/Delete"
          - "Run/Replay"
          - "Agent/Disconnect"
          - "Run/Delete"
          - "Job/Cancel"
          - "Overall/Read"
          - "Run/Update"
          - "Credentials/Create"
          - "Overall/Administer"
          - "View/Delete"
          - "Job/Configure"
          - "Metrics/View"
          - "Job/Workspace"
          - "View/Read"
        - assignments:
          - "u1"
          - "u2"
          - "u3"
          - "u4"
          - "u5"
          - "u6"
          - "u7"
          - "u8"
          - "u9"
          - "u10"
          - "u11"
          - "u12"
          - "u13"
          - "u14"
          name: "labuser"
          pattern: ".*"
          permissions:
          - "Overall/Read"
          - "Job/Move"
          - "Job/Build"
          - "View/Create"
          - "Agent/Configure"
          - "Job/Read"
          - "Credentials/Update"
          - "Agent/Create"
          - "Job/ExtendedRead"
          - "Job/Delete"
          - "Agent/Build"
          - "View/Configure"
          - "SCM/Tag"
          - "Job/Create"
          - "Job/Discover"
          - "Agent/Connect"
          - "Run/Replay"
          - "Run/Delete"
          - "Job/Cancel"
          - "Run/Update"
          - "Credentials/Create"
          - "View/Delete"
          - "Job/Configure"
          - "Job/Workspace"
          - "View/Read"

  sidecars:
    configAutoReload:
      # If enabled: true, Jenkins Configuration as Code will be reloaded on-the-fly without a reboot.  If false or not-specified,
      # jcasc changes will cause a reboot and will only be applied at the subsequent start-up.  Auto-reload uses the Jenkins CLI
      # over SSH to reapply config when changes to the configScripts are detected.  The admin user (or account you specify in
      # master.adminUser) will have a random SSH private key (RSA 4096) assigned unless you specify adminSshKey.  This will be saved to a k8s secret.
      enabled: true
      imagePullPolicy: IfNotPresent
      # folder in the pod that should hold the collected dashboards:
      folder: "/var/jenkins_home/casc_configs"
      # If specified, the sidecar will search for JCasC config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces:
      # searchNamespace:

  # By default, the configMap is only used to set the initial config the first time
  # that the chart is installed.  Setting `overwriteConfig` to `true` will overwrite
  # the jenkins config with the contents of the configMap every time the pod starts.
  # This will also overwrite all init scripts
  overwriteConfig: false

  # By default, the Jobs Map is only used to set the initial jobs the first time
  # that the chart is installed.  Setting `overwriteJobs` to `true` will overwrite
  # the jenkins jobs configuration with the contents of Jobs every time the pod starts.
  overwriteJobs: false

  ingress:
    enabled: true
    # For Kubernetes v1.14+, use 'networking.k8s.io/v1beta1'
    apiVersion: "networking.k8s.io/v1beta1"
    labels: {}
    annotations:
      ingress.kubernetes.io/ssl-redirect: "true"
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.org/client-max-body-size: "0"
      ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # Set this path to jenkinsUriPrefix above or use annotations to rewrite path
    # path: "/jenkins"
    # configures the hostname e.g. jenkins.example.com
    hostName:
    tls:
      - secretName: jenkins-prod-letsencrypt
        hosts:
          - jenkins.cluster.local

  prometheus:
    enabled: false

persistence:
  enabled: true
  storageClass:
  annotations: {}
  accessMode: "ReadWriteOnce"
  size: "2Gi"
  volumes:
  #  - name: nothing
  #    emptyDir: {}
  mounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true
